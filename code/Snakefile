##############
# This snakefile downloads reference datasets and annotations for different genomes.
# Descostes Sept 2022
# Snakemake 7.14.0
##############

# Run to generate the conda environment: snakemake --use-conda --conda-create-envs-only --cores 1
# Build the docker file: snakemake --containerize > Dockerfile

#############################
# import
#############################

import pandas as pd

configfile: "config.yaml"
containerized: "docker://emblromebioinfo/common_datasets:v0.0.1-alpha"


###############################################################################
# on Start
###############################################################################

onstart:
    print("##### REFERENCE DATASETS #####\n") 
    print("\t Creating jobs output subfolders...\n")
    shell("mkdir -p jobs/download_genome")
    shell("mkdir -p jobs/download_gtf")
    shell("mkdir -p jobs/download_gff")
    shell("mkdir -p jobs/build_bowtie_index")
    shell("mkdir -p jobs/downloadChromInfo")
    shell("mkdir -p jobs/download_blacklists")
    shell("mkdir -p jobs/sort_format_blacklist")
    shell("mkdir -p jobs/unique_tss")
    shell("mkdir -p jobs/create_whiteLists")
    shell("mkdir -p jobs/download_fastq_single")
    shell("mkdir -p jobs/download_fastq_paired")


###############################################################################
# Reading input table
###############################################################################

# Build the table of test datasets to download
samplesData = []

for tech in config["testDatasets"]["technique"]:
  for org in config["testDatasets"]["organism"]:
    pathSingle = config["testDatasets"][tech][org]["singleEnded"]
    nameSingle = config["testDatasets"][tech][org]["nameSingleEnd"]
    pathPaired1 = config["testDatasets"][tech][org]["pairedEnded1"]
    pathPaired2 = config["testDatasets"][tech][org]["pairedEnded2"]
    namePaired = config["testDatasets"][tech][org]["namePairedEnd"]
    samplesData.append([nameSingle, tech, org, "single", pathSingle, "NA"])
    samplesData.append([namePaired, tech, org, "paired", pathPaired1, pathPaired2])

df = pd.DataFrame(samplesData)
df.rename(columns={0: 'samples', 1: 'library_strategy', 2: 'organism', 3: 'library_layout', 4: 'link1', 5: 'link2'}, inplace=True)

###############################################################################
# checking content
###############################################################################

## checking library layout
tablelayout = df['library_layout'].unique()
testlayoutsingle = ['single']
testlayoutpaired = ['paired']

if (testlayoutpaired == tablelayout).all():
    print("\n\n ## The table is only composed of paired-end experiments ##\n")
elif (testlayoutsingle == tablelayout).all():
    print("\n\n ## The table is only composed of single-end experiments ##\n")
elif ((testlayoutsingle == tablelayout) | (testlayoutpaired == tablelayout)).all():
    print("\n\n ## The table is composed of single-end and paired-end experiments ##\n")
else:
    raise KeyError("The library layout should contain 'single' or 'paired'.")


###############################################################################
# Variables definition
###############################################################################

GENOMEID=config["genomeList"]
GENOMEBIOMART=config["genomeBiomart"]

PREFIXES=[]
PREFIXESEXT=[]
SPECIES=[]
for genome in GENOMEID:
  PREFIXES.append(config["prefixes"][genome])
  SPECIES.append(config["species"][genome])
  PREFIXESEXT.append(config["prefixesExtended"][genome])

# Splitting the table into single or paired end experiments

index_single = df['library_layout'] == 'single'
index_paired = df['library_layout'] == 'paired'
df_single = df[index_single]
df_paired = df[index_paired]

# Output files names

SINGLESAMPLES = df_single['samples'].tolist()
PAIREDSAMPLES = df_paired['samples'].tolist()

# For Retrieving links to download sra files

samples_single_forlinks = pd.DataFrame(df_single).set_index("samples",drop=False)
samples_paired_forlinks = pd.DataFrame(df_paired).set_index("samples",drop=False)

# Technique names
SINGLETECH = df_single['library_strategy'].tolist()
PAIREDTECH = df_paired['library_strategy'].tolist()

## Species name
SPECIESSINGLE = df_single['organism'].tolist()
SPECIESPAIRED = df_paired['organism'].tolist()

## Layout names
LAYOUTSINGLE = df_single['library_layout'].tolist()
LAYOUTPAIRED = df_paired['library_layout'].tolist()


############
# Rule all
############

rule all:
  input:
    expand("../{species}/{genome}/fasta/{prefix}.dna.chromosome.fa", zip, species=SPECIES, genome=GENOMEID, prefix=PREFIXES),
    expand("../{species}/{genome}/gtf/{prefixExt}.chr.gtf", zip, species=SPECIES, genome=GENOMEID, prefixExt=PREFIXESEXT),
    expand("../{species}/{genome}/gff/{prefixExt}.chr.gff3", zip, species=SPECIES, genome=GENOMEID, prefixExt=PREFIXESEXT),
    expand("../{species}/{genome}/bowtie2_index/{prefix}.1.bt2", zip, species=SPECIES, genome=GENOMEID, prefix=PREFIXES),
    expand("../{species}/{genome}/bowtie2_index/{prefix}.2.bt2", zip, species=SPECIES, genome=GENOMEID, prefix=PREFIXES),
    expand("../{species}/{genome}/bowtie2_index/{prefix}.3.bt2", zip, species=SPECIES, genome=GENOMEID, prefix=PREFIXES),
    expand("../{species}/{genome}/bowtie2_index/{prefix}.4.bt2", zip, species=SPECIES, genome=GENOMEID, prefix=PREFIXES),
    expand("../{species}/{genome}/bowtie2_index/{prefix}.rev.1.bt2", zip, species=SPECIES, genome=GENOMEID, prefix=PREFIXES),
    expand("../{species}/{genome}/bowtie2_index/{prefix}.rev.2.bt2", zip, species=SPECIES, genome=GENOMEID, prefix=PREFIXES),
    expand("../{species}/{genome}/chromInfo/{genomeBiomart}-chromInfo.txt", zip, species=SPECIES, genome=GENOMEID, genomeBiomart=GENOMEBIOMART),
    expand("../{species}/{genome}/blacklist/{genomeBiomart}-encodeblacklist.txt", zip, species=SPECIES, genome=GENOMEID, genomeBiomart=GENOMEBIOMART),
    expand("../{species}/{genome}/blacklist/{genomeBiomart}-encodeblacklist-sorted.bed", zip, species=SPECIES, genome=GENOMEID, genomeBiomart=GENOMEBIOMART),
    expand("../{species}/{genome}/uniqeTSS_bed/{prefixExt}_TSSunique.bed", zip, species=SPECIES, genome=GENOMEID, prefixExt=PREFIXESEXT),
    expand("../{species}/{genome}/whitelist/{genomeBiomart}-encodewhitelist-sorted.bed", zip, species=SPECIES, genome=GENOMEID, genomeBiomart=GENOMEBIOMART),
    expand("../{speciessingle}/fastq/{technique}/{layoutsingle}/allchrom/{samplename}.fastq.gz", zip, speciessingle=SPECIESSINGLE, technique=SINGLETECH, layoutsingle=LAYOUTSINGLE, samplename=SINGLESAMPLES),
#    expand("../{speciespaired}/fastq/{technique}/{layoutpaired}/allchrom/{samplenamepaired}_1.fastq.gz", zip, speciespaired=SPECIESPAIRED, technique=PAIREDTECH, layoutpaired=LAYOUTPAIRED, samplenamepaired=PAIREDSAMPLES),
#    expand("../{speciespaired}/fastq/{technique}/{layoutpaired}/allchrom/{samplenamepaired}_2.fastq.gz", zip, speciespaired=SPECIESPAIRED, technique=PAIREDTECH, layoutpaired=LAYOUTPAIRED, samplenamepaired=PAIREDSAMPLES)


include: "external_rules/downloadFiles/downloadFasta.smk"
include: "external_rules/downloadFiles/downloadGTF.smk"
include: "external_rules/downloadFiles/downloadGFF.smk"
include: "external_rules/bowtie2/indexBowtie2.smk"
include: "external_rules/downloadFiles/chromInfo.smk"
include: "external_rules/downloadFiles/blacklists.smk"
include: "external_rules/TSS/ensemblTSS_unique.smk"
include: "external_rules/whiteLists/whiteLists.smk"
include: "external_rules/downloadFiles/testDatasets.smk"

