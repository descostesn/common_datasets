##############
# This snakefile downloads reference datasets and annotations for different genomes.
# Descostes Sept 2022
# Snakemake 7.14.0
##############

# Run to generate the conda environment: snakemake --use-conda --conda-create-envs-only --cores 1
# Build the docker file: snakemake --containerize > Dockerfile

#############################
# import
#############################

import pandas as pd

configfile: "config.yaml"
containerized: "docker://emblromebioinfo/common_datasets:v0.0.1-alpha"


###############################################################################
# on Start
###############################################################################

include: "external_code/onstart.smk"

###############################################################################
# Reading input table
###############################################################################

# Build the table of test datasets to download
samplesData = []

for tech in config["testDatasets"]["technique"]:
  for org in config["testDatasets"]["organism"]:
    pathSingle = config["testDatasets"][tech][org]["singleEnded"]
    nameSingle = config["testDatasets"][tech][org]["nameSingleEnd"]
    pathPaired1 = config["testDatasets"][tech][org]["pairedEnded1"]
    pathPaired2 = config["testDatasets"][tech][org]["pairedEnded2"]
    namePaired = config["testDatasets"][tech][org]["namePairedEnd"]
    samplesData.append([nameSingle, tech, org, "single", pathSingle, "NA"])
    samplesData.append([namePaired, tech, org, "paired", pathPaired1, pathPaired2])

df = pd.DataFrame(samplesData)
df.rename(columns={0: 'samples', 1: 'library_strategy', 2: 'organism', 3: 'library_layout', 4: 'link1', 5: 'link2'}, inplace=True)


###############################################################################
# checking content
###############################################################################

## checking library layout
tablelayout = df['library_layout'].unique()
testlayoutsingle = ['single']
testlayoutpaired = ['paired']

if (testlayoutpaired == tablelayout).all():
    print("\n\n ## The table is only composed of paired-end experiments ##\n")
elif (testlayoutsingle == tablelayout).all():
    print("\n\n ## The table is only composed of single-end experiments ##\n")
elif ((testlayoutsingle == tablelayout) | (testlayoutpaired == tablelayout)).all():
    print("\n\n ## The table is composed of single-end and paired-end experiments ##\n")
else:
    raise KeyError("The library layout should contain 'single' or 'paired'.")


###############################################################################
# Functions
###############################################################################

def fq_and_index_single():
  results = []
  for sampleName in SINGLESAMPLES:
    speciessingle = samples_single_indexedPD.loc[sampleName, "organism"]
    technique = samples_single_indexedPD.loc[sampleName, "library_strategy"]
    genomes = config["genomes"][speciessingle]
    for genome in genomes:
      results.append([speciessingle, sampleName, genome, config["prefixes"][genome], config["prefixesExtended"][genome], technique])
  return results


def fq_and_index_paired():
  results = []
  for sampleName in PAIREDSAMPLES:
    speciespaired = samples_paired_indexedPD.loc[sampleName, "organism"]
    technique = samples_paired_indexedPD.loc[sampleName, "library_strategy"]
    genomes = config["genomes"][speciespaired]
    for genome in genomes:
      results.append([speciespaired, sampleName, genome, config["prefixes"][genome], config["prefixesExtended"][genome], technique])
  return results


###############################################################################
# Variables definition
###############################################################################

# Retrieving genomes and prefixes from config file
include: "external_code/genomeandprefixes.smk"

# Splitting the table into single or paired end experiments
# Retrieving output files, links, technique, species and layout names
include: "external_code/variables_single_paired.smk"

## Table of information for alignment
include: "external_code/info_for_alignment.smk"

## Prepare variables for alignment with star and bowtie2 for single-ended experiments
include: "external_code/variables_alignment_single.smk"

## Prepare variables for alignment with star and bowtie2 for pair-ended experiments
include: "external_code/variables_alignment_paired.smk"



############
# Rule all
############

rule all:
  input:
    expand("../{species}/{genome}/fasta/{prefix}.dna.chromosome.fa", zip, species=SPECIES, genome=GENOMEID, prefix=PREFIXES),
    expand("../{species}/{genome}/gtf/{prefixExt}.chr.gtf", zip, species=SPECIES, genome=GENOMEID, prefixExt=PREFIXESEXT),
    expand("../{species}/{genome}/gff/{prefixExt}.chr.gff3", zip, species=SPECIES, genome=GENOMEID, prefixExt=PREFIXESEXT),
    expand("../{species}/{genome}/bowtie2_index/{prefix}.1.bt2", zip, species=SPECIES, genome=GENOMEID, prefix=PREFIXES),
    expand("../{species}/{genome}/bowtie2_index/{prefix}.2.bt2", zip, species=SPECIES, genome=GENOMEID, prefix=PREFIXES),
    expand("../{species}/{genome}/bowtie2_index/{prefix}.3.bt2", zip, species=SPECIES, genome=GENOMEID, prefix=PREFIXES),
    expand("../{species}/{genome}/bowtie2_index/{prefix}.4.bt2", zip, species=SPECIES, genome=GENOMEID, prefix=PREFIXES),
    expand("../{species}/{genome}/bowtie2_index/{prefix}.rev.1.bt2", zip, species=SPECIES, genome=GENOMEID, prefix=PREFIXES),
    expand("../{species}/{genome}/bowtie2_index/{prefix}.rev.2.bt2", zip, species=SPECIES, genome=GENOMEID, prefix=PREFIXES),
    expand("../{species}/{genome}/chromInfo/{genomeBiomart}-chromInfo.txt", zip, species=SPECIES, genome=GENOMEID, genomeBiomart=GENOMEBIOMART),
    expand("../{species}/{genome}/blacklist/{genomeBiomart}-encodeblacklist.txt", zip, species=SPECIES, genome=GENOMEID, genomeBiomart=GENOMEBIOMART),
    expand("../{species}/{genome}/blacklist/{genomeBiomart}-encodeblacklist-sorted.bed", zip, species=SPECIES, genome=GENOMEID, genomeBiomart=GENOMEBIOMART),
    expand("../{species}/{genome}/uniqeTSS_bed/{prefixExt}_TSSunique.bed", zip, species=SPECIES, genome=GENOMEID, prefixExt=PREFIXESEXT),
    expand("../{species}/{genome}/whitelist/{genomeBiomart}-encodewhitelist-sorted.bed", zip, species=SPECIES, genome=GENOMEID, genomeBiomart=GENOMEBIOMART),
    expand("../{speciessingle}/fastq/{techniquesingle}/{layoutsingle}/allchrom/{samplenamesingle}.fastq.gz", zip, speciessingle=SPECIESSINGLE, techniquesingle=SINGLETECH, layoutsingle=LAYOUTSINGLE, samplenamesingle=SINGLESAMPLES),
    expand("../{speciespaired}/fastq/{techniquepaired}/{layoutpaired}/allchrom/{samplenamepaired}_1.fastq.gz", zip, speciespaired=SPECIESPAIRED, techniquepaired=PAIREDTECH, layoutpaired=LAYOUTPAIRED, samplenamepaired=PAIREDSAMPLES),
    expand("../{speciespaired}/fastq/{techniquepaired}/{layoutpaired}/allchrom/{samplenamepaired}_2.fastq.gz", zip, speciespaired=SPECIESPAIRED, techniquepaired=PAIREDTECH, layoutpaired=LAYOUTPAIRED, samplenamepaired=PAIREDSAMPLES),
    expand("../{species}/{genome}/STAR_index/{prefix}-{prefixExt}", zip, species=SPECIES, genome=GENOMEID, prefix=PREFIXES, prefixExt=PREFIXESEXT),
    expand("../{speciessingle}/{genomesingle}/STAR/{prefixsingle}-{prefixExtsingle}/{samplenamesingle}-Aligned.sortedByCoord.out.bam", zip, speciessingle = SPECIESSINGLESTAR, genomesingle = GENOMESINGLESTAR, prefixsingle = PREFIXSINGLESTAR, prefixExtsingle = PREFIXEXTSINGLESTAR, samplenamesingle = SAMPLENAMESSINGLESTAR),
    expand("../{speciessingle}/{genomesingle}/STAR/{prefixsingle}-{prefixExtsingle}/{samplenamesingle}-Log.final.out", zip, speciessingle = SPECIESSINGLESTAR, genomesingle = GENOMESINGLESTAR, prefixsingle = PREFIXSINGLESTAR, prefixExtsingle = PREFIXEXTSINGLESTAR, samplenamesingle = SAMPLENAMESSINGLESTAR),
    expand("../{speciessingle}/{genomesingle}/STAR/{prefixsingle}-{prefixExtsingle}/{samplenamesingle}-Log.out", zip, speciessingle = SPECIESSINGLESTAR, genomesingle = GENOMESINGLESTAR, prefixsingle = PREFIXSINGLESTAR, prefixExtsingle = PREFIXEXTSINGLESTAR, samplenamesingle = SAMPLENAMESSINGLESTAR),
    expand("../{speciessingle}/{genomesingle}/STAR/{prefixsingle}-{prefixExtsingle}/{samplenamesingle}-Log.progress.out", zip, speciessingle = SPECIESSINGLESTAR, genomesingle = GENOMESINGLESTAR, prefixsingle = PREFIXSINGLESTAR, prefixExtsingle = PREFIXEXTSINGLESTAR, samplenamesingle = SAMPLENAMESSINGLESTAR),
    expand("../{speciessingle}/{genomesingle}/STAR/{prefixsingle}-{prefixExtsingle}/{samplenamesingle}-SJ.out.tab", zip, speciessingle = SPECIESSINGLESTAR, genomesingle = GENOMESINGLESTAR, prefixsingle = PREFIXSINGLESTAR, prefixExtsingle = PREFIXEXTSINGLESTAR, samplenamesingle = SAMPLENAMESSINGLESTAR)
    

include: "external_rules/downloadFiles/downloadFasta.smk"
include: "external_rules/downloadFiles/downloadGTF.smk"
include: "external_rules/downloadFiles/downloadGFF.smk"
include: "external_rules/bowtie2/indexBowtie2.smk"
include: "external_rules/downloadFiles/chromInfo.smk"
include: "external_rules/downloadFiles/blacklists.smk"
include: "external_rules/TSS/ensemblTSS_unique.smk"
include: "external_rules/whiteLists/whiteLists.smk"
include: "external_rules/downloadFiles/testDatasets.smk"
include: "external_rules/star/indexStar.smk"
include: "external_rules/star/alignStar.smk"
